generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TodoStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum ActivityVocabStatus {
  WEAK
  GOOD
  PERFECT
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  
  // Gamification
  totalXp    Int       @default(0)     // total XP accumulated
  coins     Int       @default(0)     // current coin balance
  
  // Relations
  todos     Todo[]
  events    Event[]
  userQuests UserQuest[]
  vocabulary Vocabulary[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Quest {
  id        Int      @id @default(autoincrement())
  title     String
  type      String   // "daily" or "weekly"
  xp        Int
  coins     Int

  userQuests UserQuest[]
}

model UserQuest {
  id           Int       @id @default(autoincrement())
  userId       Int
  questId      Int
  completed    Boolean   @default(false)
  lastCompleted DateTime?

  user  User  @relation(fields: [userId], references: [id])
  quest Quest @relation(fields: [questId], references: [id])

  @@unique([userId, questId])
}


model Todo {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?    
  status       TodoStatus @default(TODO)
  priority     Int?

  // XP & coin rewards for completing this todo
  rewardXp     Int        @default(0)
  rewardCoins  Int        @default(0)

  // Relations
  userId       Int
  user         User       @relation(fields: [userId], references: [id])

  dependsOnId  Int?
  dependsOn    Todo?      @relation("TodoDependencies", fields: [dependsOnId], references: [id])
  blockedBy    Todo[]     @relation("TodoDependencies")
  
  subtasks     Subtask[]
  events       Event[] 

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Subtask {
  id        Int      @id @default(autoincrement())
  title     String
  done      Boolean  @default(false)
  todo      Todo     @relation(fields: [todoId], references: [id])
  todoId    Int
  createdAt DateTime @default(now())
}

model Event {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?
  date         DateTime?
  type         String?  // used for color/type (exam, personal, task...)
  
  // Relations
  linkedTodoId Int?
  linkedTodo   Todo?    @relation(fields: [linkedTodoId], references: [id])

  userId       Int
  user         User     @relation(fields: [userId], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Activity {
  id       Int               @id @default(autoincrement())
  activity String

  activityVocab ActivityVocab[]
}

model ActivityVocab {
  id         Int                 @id @default(autoincrement())
  activityId Int
  vocabId    Int
  status     ActivityVocabStatus @default(WEAK)

  activity Activity   @relation(fields: [activityId], references: [id], onDelete: Cascade)
  vocab    Vocabulary @relation(fields: [vocabId], references: [id], onDelete: Cascade)

  @@unique([activityId, vocabId])
}

model Category {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  vocabulary Vocabulary[]
}

model Vocabulary {
  id           Int      @id @default(autoincrement())
  english      String
  japanese     String?
  hiragana     String
  userId       Int
  categoryId   Int?
  readHiragana Boolean  @default(false)

  user     User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  activityVocab ActivityVocab[]

  @@unique([english, hiragana, userId])
}
